{"version":3,"sources":["components/Table/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","props","data","useState","tableData","setTableData","tableHeaders","setTableHeaders","useEffect","Object","keys","map","row","key","Math","random","toString","App","Header","Layout","Footer","Content","sheetData","setSheetData","showDrawer","setShowDrawer","Papa","parse","download","header","complete","updateData","error","console","result","className","onClick","title","closable","onClose","visible","placement","width","length","tip","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"6LAiCeA,EA/BD,SAAAC,GAAU,IACfC,EAAQD,EAARC,KADc,EAEaC,mBAAS,IAFtB,mBAEdC,EAFc,KAEHC,EAFG,OAGmBF,mBAAS,IAH5B,mBAGdG,EAHc,KAGAC,EAHA,KAUrB,OALAC,qBAAU,WACRH,EAAaH,GACbK,EAAgBE,OAAOC,KAAKR,EAAK,OAChC,CAACA,IAGF,+BACM,0DACA,+BACE,4BACE,4BAAKI,EAAa,IAClB,4BAAKA,EAAa,IAClB,4BAAKA,EAAa,MAGtB,iCACKF,GAAaA,EAAUO,KAAI,SAAAC,GAAG,OAAI,wBAAIC,IAAKC,KAAKC,SAASC,YAC1D,4BAAKJ,EAAIN,EAAa,KACtB,4BAAKM,EAAIN,EAAa,KACtB,4BAAKM,EAAIN,EAAa,Y,yBCoCrBW,MAvDf,WAAgB,IACNC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QADX,EAEqBlB,mBAAS,IAF9B,mBAENmB,EAFM,KAEKC,EAFL,OAGuBpB,oBAAS,GAHhC,mBAGNqB,EAHM,KAGMC,EAHN,KAKbjB,qBAAU,WAER,IACE,OAAOkB,IAAKC,MAFC,iJAEa,CACxBC,UAAU,EACVC,QAAQ,EACRC,SAAUC,IAEZ,MAAMC,GACNC,QAAQD,MAAM,kDAAmDA,MAElE,IAEH,IAUMD,EAAa,SAACG,GAClBX,EAAaW,EAAOhC,OAGtB,OACE,kBAAC,IAAD,CAAQiC,UAAU,OAChB,kBAACjB,EAAD,CAAQiB,UAAU,aAChB,wBAAIA,UAAU,WAAd,SAEF,kBAACd,EAAD,CAASc,UAAU,WACjB,kBAAC,IAAD,CAAQC,QApBW,WACvBX,GAAc,KAmBV,gCACA,kBAAC,IAAD,CACEY,MAAM,uBACNC,UAAU,EACVC,QArBiB,WACvBd,GAAc,IAqBRe,QAAShB,EACTiB,UAAU,QACVC,MAAM,OAEHpB,EAAUqB,OAAS,kBAAC,EAAD,CAAOzC,KAAMoB,IAAe,kBAAC,IAAD,CAAMsB,IAAI,sBAGhE,kBAACxB,EAAD,iCC7CcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLC,QAAQD,MAAMA,EAAM6B,a","file":"static/js/main.9cf40c48.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nconst Table = props => {\r\n  const {data} = props;\r\n  const [tableData, setTableData] = useState([]);\r\n  const [tableHeaders, setTableHeaders] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    setTableData(data);\r\n    setTableHeaders(Object.keys(data[0]));\r\n  }, [data])\r\n\r\n  return(\r\n    <table>\r\n          <caption>Sheet content preview</caption>\r\n          <thead>\r\n            <tr>\r\n              <th>{tableHeaders[0]}</th>\r\n              <th>{tableHeaders[1]}</th>\r\n              <th>{tableHeaders[2]}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {!!tableData && tableData.map(row => <tr key={Math.random().toString()}>\r\n              <td>{row[tableHeaders[0]]}</td>\r\n              <td>{row[tableHeaders[1]]}</td>\r\n              <td>{row[tableHeaders[2]]}</td>\r\n            </tr>)}\r\n          </tbody>\r\n        </table>\r\n  )\r\n}\r\n\r\nexport default Table;","import React, {useState, useEffect} from 'react';\nimport { Button, Drawer, Layout, Spin } from 'antd';\nimport Table from './components/Table/Table';\nimport './App.scss';\n\nimport Papa from 'papaparse';\n\nfunction App() {\n  const { Header, Footer, Content } = Layout;\n  const [sheetData, setSheetData] = useState([]);\n  const [showDrawer, setShowDrawer] = useState(false);\n\n  useEffect(() => {\n    const source = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSCT-qGizC85dIjMYIt6EAxlAT1Z-7J5ktgc9RgWOxapCYArCPvi5TgoqaJ5AL0c2q0b3gN-v2yGcVS/pub?output=csv'\n    try {\n      return Papa.parse(source, {\n        download: true,\n        header: true,\n        complete: updateData\n      })\n    } catch(error) {\n      console.error('Something was wrong. Cannot load spreadsheet ;(', error)\n    }\n  }, [])\n\n  const handleShowDrawer = () => {\n    setShowDrawer(true);\n  }\n  const handleHideDrawer = () => {\n    setShowDrawer(false);\n  }\n\n\n\n\n  const updateData = (result) => {\n    setSheetData(result.data)\n  }\n\n  return (\n    <Layout className=\"App\">\n      <Header className=\"AppHeader\">\n        <h1 className=\"AppName\">Momi</h1>\n      </Header>\n      <Content className=\"Content\">\n        <Button onClick={handleShowDrawer}>Display all spreadsheet data</Button>\n        <Drawer\n          title=\"All spreadsheet data\"\n          closable={true}\n          onClose={handleHideDrawer}\n          visible={showDrawer}\n          placement=\"right\"\n          width=\"500\"\n        >\n          {!!sheetData.length ? <Table data={sheetData}/> : <Spin tip=\"Loading data...\"/>}\n        </Drawer>\n      </Content>\n      <Footer>&copy; 2020 by fadehelix</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}